dasl {
  DaslSpecs = DaslSpec+

  DaslSpec =
    SignatureHeader  SignatureSpecs
    ComponentHeader  ComponentSpecs
    ConnectionHeader ConnectionSpecs

  SignatureHeader = Splitter "signatures"
  ComponentHeader = Splitter "components"
  ConnectionHeader = Splitter "connections"
  Splitter = "==="
  

  ComponentSpecs = ComponentSpec+
  ComponentSpec = ComponentName ComponentList
  ComponentList = "[" InnerComponentName* "]"

  SignatureSpecs = Signature+
  Signature = ComponentName Inputs Outputs

  ConnectionSpecs = ConnectionSpec+
  ConnectionSpec = ComponentName "[" Connection+ "]"
  Connection = Sender "->" Receiver ReceiverRest*
  ReceiverRest = "," Receiver
  Receiver = ComponentName "." PortName
  Sender = ComponentName "." PortName

  InnerComponentName = "[" name "]"
  ComponentName = "[" name "]"
  name = namechar*
  legalChar = ~nl ~ws ~delim any
  namechar = " " | legalChar
  Inputs = "<" Input*
  Input = PortName
  Outputs = ">" Output*
  Output = PortName
  PortName =   "(" ")" -- empty
             | "(" name? ")" -- nonEmpty
  nl = "\n"
  ws = " "
  delim = "[" | "]" | "(" | ")" | "<" | ">"
}


  DaslSpecs [@specs] = 
    {{ scopeAdd ('counter', 0); }}
    [[${specs}]]
  
  DaslSpec [sigh signatures comph components connh connections] =
  [[${signatures}\n${components}\n${connections}]]
  
  SignatureHeader [h name]= [[]]
  ComponentHeader [h name]= [[]]
  ConnectionHeader [h name]= [[]]

  ComponentSpecs [@specs] =[[${specs}]]
  ComponentSpec [name list] =
    {{
      var nm = _name._glue ();
      scopeAdd ("current component", nm);
    }}
    [[${console.log('component("' + name + '",nil).'),list}]]
  ComponentList [lb @name rb] =[[${name}]]

  SignatureSpecs [@signatures] = [[${signatures}]]
  Signature [name inputs outputs] =
    {{ scopeAdd ('componentName', _name._glue ()) }}
    [[${inputs}${outputs}]]

  ConnectionSpecs [@specs] =[[${specs}]]
  ConnectionSpec [name lb @connections rb] =
    {{
      var nm = _name._glue ();
      scopeAdd ("current component", '"' + nm + '"');
    }}
    [[${connections}]]
  Connection [sender arrow receiver1 @receivers] =
    {{
      scopeAdd ("connection", "n" + gen ());
    }}
    [[connection(${scopeGet ('current component')},${scopeGet ('connection')}).\n${sender}${receiver1}${receivers}]]

  Receiver [componentName dot portName] =
    {{ scopeAdd ("pair", "p" + gen () ); }}
    [[${console.log ('pc(' + scopeGet ('pair') + ',"' + componentName + '").'), console.log ('pp(' + scopeGet ('pair') + ',"' + portName + '").'), console.log ('receiver(' + scopeGet ('connection') + "," + scopeGet ('pair') + ').'),""}]]    

  ReceiverRest [comma receiver] =
    [[${receiver}]]
    
  Sender [componentName dot portName] =
    {{ scopeAdd ("pair", "id" + gen () ); }}
    [[${console.log ('pc(' + scopeGet ('pair') + ',"' + componentName + '").'), console.log ('pp(' + scopeGet ('pair') + ',"' + portName + '").'), console.log ('sender(' + scopeGet ('connection') + "," + scopeGet ('pair') + ').'),""}]]


  ComponentName [lb name rb] =[[${name}]]
  InnerComponentName [lb name rb] = [[contained(\"${name}\",\"${scopeGet ('current component')}\").\n]]

  name [@cs] =[[${cs}]]
  legalChar [c] = [[${c}]]
  namechar [c] = [[${c}]]
  Inputs [lt @inputs] =[[${inputs}]]
  Input [portname] =[[inputPort("${scopeGet ('componentName')}","${portname}").\n]]
  Outputs [gt @outputs] =[[${outputs}]]
  Output [portname] =[[outputPort("${scopeGet ('componentName')}","${portname}").\n]]
  PortName_empty [lp rp] =[[]]
  PortName_nonEmpty [lp @name rp] =[[${name}]]
  nl [c] =[[${c}]]
  ws [c] =[[${c}]]
  delim [c] =[[${c}]]

