diagram [fill in empty runnable]
< (* my Composite Template) (my runnable)
> ()
{
  contains [forall] < () > ()
  { /children of (* Composite Template)/ -> (* child)
  }
  [1].(1) -> "my runnable filled in with children"
  
  "my runnable filled in with children" -> [2].(1)
  contains [forall] < () > ()
  { /connections of (* Composite Template)/ -> (* connection)
  }
}



diagram [clone and fixup connections]
< (my runnable filled with children) (* my composite Template) (connection) 
> ()
{
  contains [clone connection] < () () > ()
  [.].(connection) -> [clone connection].(1)
  [.].(my Composite Template) -> [clone connection].(2)
  [clone connection].(1) -> "runnable connection with holes"

  contains [fixup connection] < () () > ()
  "runnable connection with holes" -> [fixup connection].(1)
  [fixup connection].(1) -> "fixed up connection"

  contains [insert connection into runnable] < () () > "final runnable"
  "fixed up connection" -> [insert connection into runnable].(1)
  [.].(my runnable filled with children) -> [insert connection into runnable].(2)

  [insert connection into runnable].(1) > "final runnable"
  "final runnable" -> [.].(1)
}

diagram [create runnable children]
< (my runnable) (* my composite Template) (child)
> ()
{
  var "child instance"
  var "named child instance"
  var "filled child instance"
  var "my runnable filled with children"

  contains [make instance] < () > ()
  contains [invent name] < () () > ()
  contains [recursively instantiate] < () > ()
  contains [insert child into children of my runnable] < () > ()

  [.].(child) -> [make instance].(1)
  [make instance].(1) -> "child instance"
  
  "child instance" -> [invent name].(1)
  [.].(my composite Template) -> [invent name].(2)
  [invent name].(1) -> "named child instance"

  "named child instance" -> [recursively instantiate].(1)
  [recursively instantiate].(1) -> "filled child instance"

  "filled child instance" -> [insert child into children of my runnable].(1)
  [.].(my runnable) -> [insert child into children of my runnable].(1)
  [insert child into children of my runnable].(1) -> "my runnable filled with children"
  "my runnable filled with children" ->[.].(1)

}
