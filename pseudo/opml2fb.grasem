OPML2FB {
  OPML = xmlHeader opmlHeader head body Outline endBody endOPML
  opmlHeader = "<opml" opmlHeaderChar* ">" newline
  xmlHeader = "<?xml" xmlHeaderChar* "?>" newline
  head = "<head>" headChar* "</head>" newline
  body = "<body>" newline
  endBody = "</body>" newline
  endOPML = "</opml>" (newline | end)

  Outline = OutlineNoContent | OutlineWithContent
  OutlineNoContent = "<outline" item "/>"
  OutlineWithContent = "<outline" item ">" Outline* "</outline>"

  item = noise | graphicalObject | attribute 
  graphicalObject = lineObject | arrowObject | circleObject | compObject | rectObject | cylinderObject
  attribute = colorAttr | strokeWidthAttr | textAttr | genericAttr
  
  noise = "text=\"lines" stringTail

  circleObject = "text=" dq "circle" " " ubeginquote qident uendquote dq
  compObject = "text=" dq "comp" " " ubeginquote qident uendquote dq
  rectObject = "text=" dq "rect" " " ubeginquote qident uendquote dq
  cylinderObject = "text=" dq "cyl" " " ubeginquote qident uendquote dq
  lineObject = "text=" dq "line" " " ubeginquote qident uendquote dq
  arrowObject = "text=" dq "arrow" " " qident ws+ receiverList dq

  colorAttr = "text=\"color=" stringTail
  strokeWidthAttr = "text=\"stroke-width=" stringTail
  textAttr = "text=\"text=" stringTail
  genericAttr = "text=" string
  
  headChar = ~"</head>" any
  opmlHeaderChar = ~">" any
  xmlHeaderChar = ~"?>" any
  newline = "\n"

  string = dq notDQ* dq
  stringTail = notDQ* dq
  dq = "\""
  notDQ = ~"\"" any
  quote = dq

  ubeginquote = "“"
  uendquote = "”"

  qident = qident_recursive | qident_flat
  qident_flat = "a" .. "z" | "A" .. "Z"
  qident_recursive = qident_flat "/" qident
  
  receiverList = receiver+
  receiver = receiverMore | receiverSingle
  receiverMore = receiverSingle ws+
  receiverSingle = qident

  ws = " "
}


  OPML [xmlhdr opmlhdr head body outline endbody endopml] =
    {{ scopeAdd ('counter', 0); }}
    [[${xmlhdr}${opmlhdr}${head}${body}${outline}${endbody}${endopml}]]
  opmlHeader [begin @hdr close nl] = [[]]
  xmlHeader [begin @hdr close nl] = [[]]
  head [begin @hdr close nl] = [[]]
  body [begin nl] = [[]]
  endBody [begin nl] = [[]]
  endOPML [begin nl] = [[]]

  Outline [o] = [[${o}]]
  OutlineNoContent [begin t slashClose] = [[${t}\n]]
  OutlineWithContent [begin t close @o slasho] = {{scopeAdd ("gobject", "id" + gen ())}} [[${t}${o}]]

  headChar [c] = [[${c}]]
  opmlHeaderChar [c] = [[${c}]]
  xmlHeaderChar [c] = [[${c}]]
  newline [c] = [[${c}]]

  item [i] = [[${i}]]
  graphicalObject [o] = [[${o.trim ()}\n]]
  attribute [a] = [[${a.trim ()}\n]]

  circleObject [teq dq1 circle spc ubq id ueq dq2] = [[circle(${scopeGet ("gobject")}, ${id}).]]

  compObject [teq dq1 comp spc ubq id ueq dq2] = [[comp(${scopeGet ("gobject")}, ${id}).]]

  rectObject [teq dq1 comp spc ubq id ueq dq2] = [[rect(${scopeGet ("gobject")}, ${id}).]]
  cylinderObject [teq dq1 comp spc ubq id ueq dq2] = [[cyl(${scopeGet ("gobject")}, ${id}).]]
  lineObject [teq dq1 comp spc ubq id ueq dq2] = [[line(${scopeGet ("gobject")}, ${id}).]]

  arrowObject [teq dq1 comp spc idsender @ws idsreceiver dq2] =
  {{ scopeAdd ("arrow", "a" + gen ()) }}
  [[
arrow(${scopeGet ("gobject")}, ${scopeGet ("arrow")}).
arrowBegin(${scopeGet ("arrow")}, ${abegin (idsender)}).
arrowEnd(${scopeGet ("arrow")}, ${aend (idsreceiver)}).]]

  colorAttr [teqc str] = [[color(${scopeGet ("gobject")}, ${str}).]]
  strokeWidthAttr [teqc str] = [[strokeWidth(${scopeGet ("gobject")}, ${str}).]]
  textAttr [teqc str] =
    {{ scopeAdd("tobject", "tid" + gen ()) }}
    [[str(${scopeGet ("tobject")}, ${changeUnicodeQuotes (str)}).\ntext(${scopeGet ("gobject")}, ${scopeGet ("tobject")}).]]
  genericAttr [teq str] = [[${teq}${str}]]

  string [q1 @cs q2] = [[${q1}${changeUnicodeQuotes (cs)}${q2}]]
  stringTail [@cs q2] = [[${changeUnicodeQuotes (cs)}${q2}]]
  notDQ [c] = [[${c}]]
  dq [c] = [[]]

  noise [a b] = [[]]

  ubeginquote [c] = [[]]
  uendquote [c] = [[]]

  qident [id] = [[${id}]]
  qident_flat [c] = [[${c}]]
  qident_recursive [id slash qid] = [[${id}_${qid}]]

  receiverList [@r] = [[${r}]]
  receiver [r] = [[${r}]]
  receiverMore [r @ws] = [[${r},]]
  receiverSingle [id] = [[${id}]]
