OPML2FB {
  OPML = xmlHeader opmlHeader head body TopLevel endBody endOPML
  opmlHeader = "<opml" opmlHeaderChar* ">" newline
  xmlHeader = "<?xml" xmlHeaderChar* "?>" newline
  head = "<head>" headChar* "</head>" newline
  body = "<body>" newline
  endBody = "</body>" newline
  endOPML = "</opml>" (newline | end)

  TopLevel = CompObjectContainer

  CompObjectContainer = "<outline" noise* "text=\"comp" synonym dq ">" ObjectOrAttribute* Connections "</outline>"
  RectObjectContainer = "<outline" noise* "text=\"rect" synonym dq">" ObjectOrAttribute* Connections "</outline>"
  Connections = "<outline" noise* "text=\"connections" ">" Arrow* dq "</outline>"

  Object = CompObjectContainer | RectObjectContainer | CompObject | RectObject | CircleObject | CylObject
   CompObject = "<outline" noise* "text=\"comp" synonym dq "/>" Attribute* "</outline>"
   RectObject = "<outline" noise* "text=\"rect" synonym dq "/>" Attribute* "</outline>"
   CircleObject = "<outline" noise* "text=\"circle" synonym dq "/>" Attribute* "</outline>"
   CylObject = "<outline" noise* "text=\"cyl" synonym dq "/>" Attribute* "</outline>"

  Arrow = "<outline" noise* "text=\"arrow" sender receiver* dq "/>"

  Attribute = colorAttribute | strokeWidthAttribute | textAttribute | akaAttribute | genericAttribute
   colorAttribute = "<outline" noise* "text=\"color=" ident dq
   strokeWidthAttribute = "<outline" noise* "text=\"stroke-width=" number dq
   textAttribute = "<outline" noise* "text=\"text=" characters dq
   akaAttribute = "<outline" noise* "text=\"aka=" ident dq
   genericAttribute = "<outline" noise* "text=" dq characters dq

    receiver = qident ws*
    sender = qident ws*

  noise = "_status=" dq stuff dq 

  synonym = qident
  
      headChar = ~"</head>" any
      opmlHeaderChar = ~">" any
      xmlHeaderChar = ~"?>" any
      newline = "\n"

      ident = ubeginquote flat_ident uendquote
      number = ubeginquote int+ uendquote
      characters = ubeginquote notUendquote* uendquote

      notUendquote = ~uendquote any
      int = "0" .. "9"
      ubeginquote = "“"
      uendquote = "”"

      flat_ident = "a" .. "z" | "A" .. "Z"
      qident = qident_recursive | flat_ident
      qident_recursive = flat_ident "/" qident
  
      ws = " "

}

  OPML [xmlhdr opmlhdr head body outline endbody endopml] =
    {{ 
      resetCounter (); 
      resetLineNumber (); 
      newObject ();
    }}
    [[${xmlhdr}${opmlhdr}${head}${body}${outline}${endbody}${endopml}diagram(${getObject ()},nil)]]
  opmlHeader [begin @hdr close nl] = [[]]
  xmlHeader [begin @hdr close nl] = [[]]
  head [begin @hdr close nl] = [[]]
  body [begin nl] = [[]]
  endBody [begin nl] = [[]]
  endOPML [begin nl] = [[]]

  TopLevel [x] = [[${x}]]

  Container [head @objectOrAttribute tail] = {{ newContainer (); }} [[${objectOrAttribute}]]

  ContainerHead [head @noise obj tail] = [[${obj}]]
  ContainerTail [tail] = [[]]
  Object [obj] = [[${obj}contains(${getContainer ()}, ${getObject ()}).\n${sideEffectNewObject()}]]
  Leaf [head @noise obj tail] = [[${obj}]]
  NonObjectContainer [head @noise @objOrAttr tail] = [[${objOrAttr}]]
  ObjectOrAttribute [item] = [[${item}]]
  Attribute [head @noise attr tail] = [[${attr}]]

  noise [head tail] = [[]]
  circleObject [teq dq1 circle spc ubq id ueq dq2] =  [[circle(${getObject ()}, ${id}).\nshape(${getObject ()}, "circle").]]

  compObject [teq dq1 comp spc ubq id ueq dq2] = [[comp(${getObject ()}, ${id}).\nshape(${getObject ()}, "component").]]

  rectObject [teq dq1 comp spc ubq id ueq dq2] = [[rect(${getObject ()}, ${id}).\nshape(${getObject ()}, "rect").]]
  cylinderObject [teq dq1 comp spc ubq id ueq dq2] = [[cyl(${getObject ()}, ${id}).\nshape(${getObject ()}, "cylinder").]]
  lineObject [teq dq1 comp spc ubq id ueq dq2] = [[line(${getObject ()}, ${id}).\nshape(${getObject ()}, "line").]]

  arrowObject [teq dq1 comp spc sender @ws receiverList dq2] = {{ newArrow (); }} [[arrow(${getContainer ()}, ${getArrow ()}).\nshape(${getObject ()}, "arrow").\n${sender}${receiverList}]]

  colorAttr [teqc str] = [[color(${getObject ()}, ${str}).]]
  akaAttr [teqc str] = [[aka(${getObject ()}, ${str}).]]
  strokeWidthAttr [teqc str] = [[strokeWidth(${getObject ()}, ${str}).]]
  textAttr [teqc str] =
    {{ newTextObject (); scopeAdd("tobject", "tid" + gen ()) }}
    [[str(${getTextObject ()}, ${changeUnicodeQuotes (str)}).\ntext(${getObject ()}, ${getTextObject ()}).]]
  genericAttr [teq str] = {{ throw `generic attribute /line=${scopeGet('line')}/ /${str}/`; }} [[${teq}${str}]]

  headChar [c] = [[${c}]]
  opmlHeaderChar [c] = [[${c}]]
  xmlHeaderChar [c] = [[${c}]]
  newline [c] = {{ incLineNumber () }} [[${c}]]

  string [q1 @cs q2] = [[${q1}${changeUnicodeQuotes (cs)}${q2}]]
  stringTail [@cs q2] = [[${changeUnicodeQuotes (cs)}${q2}]]
  notDQ [c] = [[${c}]]
  dq [c] = [[]]

  noise [a b] = [[]]

  ubeginquote [c] = [[]]
  uendquote [c] = [[]]

  qident [id] = [[${id}]]
  qident_flat [c] = [[${c}]]
  qident_recursive [id slash qid] = [[${id}_${qid}]]

  receiverList [@r] = [[${r}]]
  receiver [r] = [[${r}]]
  receiverMore [r @ws] = [[${r},]]
  receiverSingle [id] = [[aEnd(getArrow (), ${id})]]

  send [id] = [[aBegin(getArrow (), ${id})]]
